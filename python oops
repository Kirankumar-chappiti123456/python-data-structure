python oops:

object oriented programming language:
object oriented programming language which uses classes and object for computing.
it's aim to implement real world entity like inheritance,polymorphism,encapsulation and the data abstraction in the programming.
The main concept of oop's is to bind the data and function together to work as a single unit.so that no other part of the code can access this data.

advantages of oop's:
Development and maintance the python code is easier than the procedural language.
can easily slove the real world problem and it doesn't work step by step instructions.
data in python code are secured due to it'sspecial features "data hidding".


principle of oop's:
Class 
Object
Method
Inheritance
Polymorphism
Encapsulation
Data abstraction.


Class:
A class is collection of objects
A class conatins the blueprint for creating the objects
Class is a logical entity and it have some attributes and methods.
EX: class employee:
    employee id=1
    employee age=22
    employee salary....etc
In employee class we have some of the attributes and methods like emp id,age,salary,phone no,email id etc.
Class are created by class "keyword".
Attributes are the variable and that belong to that class.
Attributes are alway public and we can access the variable using the "." or dot operator.


syntax:
class classname:
statement 1
and 
statement 2 

ex:
class employee:
    x=5
p=employee()
print(p.x)

o/p:5


object: object is an entity that has state and behaviour and  identity.
It may be a real world object like pen,chair and mouse,car.
Everything in python is an object and object has the some attributes and methods.

syntax:
object= class name(parameters)
p     = employee("kiran",26)

Ex:
class employee:
    def __init__(s,name,age):
        s.name=name
        s.age=age
p=employee("kiran",26)
print(p.name)
print(p.age)

o/p:
kiran 
26.

Self parameter:
self parameter is a refference of the current instance of a class and it is used to access the variable that belong to that class.

init function:
init function is assign values to object properities.When the object is being created.

ex:
class employee:
    def __init__(s,name,age):
        s.name=name
        s.age=age
p=employee("kiran",26)
print(p.name)
print(p.age)

Methods:
Method is a  function that is associated with object.
Method is not a unique to class instance and any object type have the method.

ex:
class employee:
    def __init__(s,name,age):
        s.name=name
        s.age=age
    def myfun(s):------------------------------------------> Method
        print(f"my name is {s.name},and age is {s.age}")
p=employee("kiran",26)
p.myfun()

inheritance:
inheritance is a process of creating a new class from an existing class.

type of inheritance:
1.Single inheritance
2.Multiple inheritance
3.Multilevel inheritance
4.Hierarchical inheritance
5.Hybrid inheritance

Single inheritance:
When a child class inherit or access the data only from one parent is called the single inheritance.

ex:
class parent:
    def __init__(s,name,age):
        s.name=name
        s.age=age                 # parent class
        

class child(parent):
    def __init__(s,name,age):
        super().__init__(name,age) #or parent.__init__(s,name,age) #child class
    def myfun(s):
        print(f"my name is {s.name},and age is {s.age}")
        
        
p=child("kiran",26)
p.myfun()

o/p:my name is kiran,and age is 26


multiple inheritance:
When a child class inherit or acess the data from one or two parent class is called multiple inheritance.

ex:
class father:
    def __init__(s,name):
        s.name=name    # parent class
        
class mother:
    def __init__(s,age):
        s.age=age      #parent class

class child(father,mother):     #child
    def __init__(s,name,age):
        father.__init__(s,name) #or parent.__init__(s,name,age) #child class
        mother.__init__(s,age)  
        
    def myfun(s):
        print(f"my name is {s.name},and age is {s.age}")
        
        
p=child("kiran",26)
p.myfun()



multilevel inheritance:
When a child class become a parent class  for another child class is called multilevel inheritance.

ex:
class father:
    def __init__(s,name):
        s.name=name    # parent class
        
class mother:
    def __init__(s,age):
        s.age=age      #parent class

class child(father,mother):     #child or becoming the parent class for another child class.
    def __init__(s,name,age):     
        father.__init__(s,name) #or parent.__init__(s,name,age) #child class
        mother.__init__(s,age)  
        
class anotherchild(child):         #anotherchild class
    def __init__(s,name,age):
        super().__init__(name,age)
        
    def myfun(s):
        print(f"my name is {s.name},and age is {s.age}")
        
        
p=anotherchild("kiran",26)
p.myfun()


hierachical inheritance:
When one or two child class  inherit only one parent class and get the same data is called the hierarchical inheritance.

ex:

class employee:
    #constructor
    def __init__(s,name,age):
        #private member.
        s.name=name    # parent class
        s.age=age
        
class testing(employee):
    def __init__(s,name,age,itemp):
        s.itemp=itemp
        super().__init__(name,age)
    def fun1(s):
        print(f"The it emp name is {s.name},and age is {s.age},and it emp {s.itemp}")
        
class coder(employee):
    def __init__(s,name,age,itemp):
        s.itemp=itemp
        super().__init__(name,age)
    def fun2(s):
        print(f"The it emp name is {s.name},and age is {s.age},and it emp {s.itemp}")
        
s=testing("kiran",26,"tester")
s.fun1()

s1=coder("murali",55,"coder")
s1.fun2()

o/p:
The it emp name is kiran,and age is 26,and it emp tester
The it emp name is murali,and age is 55,and it emp coder.

hybrid inheritance:
when one or two child inherit from one or more parent class is called hybrid inheritance.

